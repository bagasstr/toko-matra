generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// User Management
// =========================

/// Tabel utama untuk user aplikasi
model User {
  id            String         @id
  email         String         @unique
  emailVerified DateTime?      @map("email_verified")
  password      String // hashed password
  role          UserRole       @default(CUSTOMER) // customer | admin
  typeUser      String // individu | perusahaan | toko
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile?
  sessions      Session[]
  address       Address[]
  product       Product[]
  cart          Cart[]
  order         Order[]
  review        Review[]
  account       Account[]
  Notification  Notification[]

  @@map("users")
}

/// Profil user, relasi 1:1 ke User
model Profile {
  id          String   @id
  userId      String   @unique
  fullName    String?
  imageUrl    String?
  phoneNumber String?  @unique
  email       String?
  userName    String?
  gender      String?
  dateOfBirth String?
  bio         String?
  companyName String?
  taxId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

/// Akun OAuth/SSO user
model Account {
  id                String  @id
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Address {
  id            String   @id
  userId        String
  recipientName String?
  labelAddress  String?
  address       String?
  city          String?
  province      String?
  district      String?
  village       String?
  postalCode    String?
  isPrimary     Boolean  @default(false)
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  order         Order[]

  @@map("address")
}

// =========================
// Produk & Kategori
// =========================

/// Brand produk
model Brand {
  id        String    @id
  name      String
  logo      String?
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("brands")
}

/// Kategori produk, mendukung tree/hirarki
model Category {
  id          String     @id
  name        String
  slug        String     @unique
  description String?
  icon        String?
  imageUrl    String?
  isActive    Boolean    @default(true)
  parentId    String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

/// Produk utama
model Product {
  id          String      @id
  sku         String      @unique
  name        String
  slug        String      @unique
  description String?
  images      String[] // Array URL gambar
  price       Int
  unit        String // Satuan: kg, m, m2, dll
  stock       Int         @default(0)
  minOrder    Int         @default(0)
  multiOrder  Int         @default(0)
  weight      Float?
  dimensions  String?
  isFeatured  Boolean     @default(false)
  isActive    Boolean     @default(true)
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  cartItems   CartItem[]
  orderItem   OrderItem[]
  review      Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  brand       Brand?      @relation(fields: [brandId], references: [id])
  brandId     String?
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?

  @@index([slug])
  @@index([categoryId])
}

model Notification {
  id        String   @id
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Cart {
  id        String     @id
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id          String      @id
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  addressId   String
  address     Address     @relation(fields: [addressId], references: [id])
  status      OrderStatus @default(PENDING)
  totalAmount Int
  items       OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Payment     Payment[]
  Shipment    Shipment?

  @@map("orders")
}

model OrderItem {
  id        String   @id
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Payment {
  id            String   @id
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id])
  amount        Int
  paymentMethod String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("payments")
}

model Shipment {
  id             String   @id
  orderId        String   @unique
  order          Order    @relation(fields: [orderId], references: [id])
  trackingNumber String?
  carrier        String?
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("shipments")
}

model Review {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

// untuk role user
enum UserRole {
  ADMIN
  CUSTOMER
}

// untuk payment method
enum PaymentMethod {
  BANK_TRANFER
  E_WALLET
  VIRTUAL_ACCOUNT
  QR_CODE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

// model Category {
//   id           Int       @id @default(autoincrement())
//   nameCategory String
//   slug         String
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt
//   product      Product[]

//   @@map("category")
// }
// model Product {
//   id          Int      @id @default(autoincrement())
//   nameProduct String
//   slug        String
//   description String
//   price       Int
//   imageUrl    String
//   stock       Int
//   categoryId  Int
//   category    Category @relation(fields: [categoryId], references: [id])

//   createdAt DateTime    @default(now())
//   updatedAt DateTime    @updatedAt
//   brand     Brand?      @relation(fields: [brandId], references: [id])
//   brandId   Int?
//   cartItems CartItem[]
//   orderItem OrderItem[]
//   review    Review[]

//   @@map("products")
// }

// schema.prisma
