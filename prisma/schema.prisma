generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// User Management
// =========================

model User {
  id               String            @id
  email            String            @unique
  emailVerified    DateTime?         @map("email_verified")
  password         String // hashed password
  role             UserRole          @default(CUSTOMER) // customer | admin
  typeUser         String // individu | perusahaan | toko
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  profile          Profile?
  sessions         Session[]
  address          Address[]
  product          Product[]
  cart             Cart[]
  order            Order[]
  account          Account[]
  Notification     Notification[]
  proformaInvoices ProformaInvoice[]
  Invoice          Invoice[]
  Wishlist         Wishlist[]

  @@map("users")
}

model Profile {
  id          String   @id
  userId      String   @unique
  fullName    String?
  imageUrl    String?
  phoneNumber String?  @unique
  email       String?
  userName    String?
  gender      String?
  dateOfBirth String?
  bio         String?
  companyName String?
  taxId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Account {
  id                String  @id
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Address {
  id            String   @id
  userId        String
  recipientName String?
  labelAddress  String?
  address       String?
  city          String?
  province      String?
  district      String?
  village       String?
  postalCode    String?
  isPrimary     Boolean  @default(false)
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order         Order[]

  @@map("address")
}

// =========================
// Produk & Kategori
// =========================

/// Brand produk
model Brand {
  id        String    @id
  name      String
  logo      String?
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("brands")
}

model Category {
  id          String     @id
  name        String
  slug        String     @unique
  description String?
  icon        String?
  imageUrl    String?
  isActive    Boolean    @default(true)
  parentId    String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

model Product {
  id                  String                @id
  sku                 String                @unique
  name                String
  slug                String                @unique
  description         String?
  label               String? // ready stock | suplier
  images              String[] // Array URL gambar
  price               Int
  unit                String // Satuan: kg, m, m2, dll
  stock               Int                   @default(0)
  minOrder            Int                   @default(0)
  multiOrder          Int                   @default(0)
  weight              Float?
  dimensions          String?
  isFeatured          Boolean               @default(false)
  isActive            Boolean               @default(true)
  category            Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId          String
  cartItems           CartItem[]
  orderItem           OrderItem[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  brand               Brand?                @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId             String?
  User                User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String?
  InvoiceItem         InvoiceItem[]
  ProformaInvoiceItem ProformaInvoiceItem[]
  ShipmentItem        ShipmentItem[]
  Wishlist            Wishlist[]

  @@index([slug])
  @@index([categoryId])
}

model Notification {
  id        String   @id
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Cart {
  id        String     @id
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id              String            @id
  userId          String
  status          OrderStatus       @default(PENDING)
  totalAmount     Int
  subtotalAmount  Int?
  addressId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  address         Address           @relation(fields: [addressId], references: [id], onDelete: Cascade)
  items           OrderItem[]
  Payment         Payment[]
  Shipment        Shipment[]
  Invoice         Invoice[]
  ProformaInvoice ProformaInvoice[]

  @@map("orders")
}

model OrderItem {
  id        String   @id
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Payment {
  id                String    @id @default(cuid())
  orderId           String
  order             Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount            Int
  paymentMethod     String // bisa juga enum
  paymentType       String? // dari Midtrans: credit_card, bank_transfer, gopay, dll
  transactionId     String? // Midtrans transaction_id
  transactionTime   DateTime? // Midtrans transaction_time
  transactionStatus String? // settlement, pending, cancel, etc.
  fraudStatus       String? // Midtrans fraud_status
  bank              String? // untuk VA: bca, bni, dll
  vaNumber          String? // nomor virtual account
  approvalCode      String? // optional, dari midtrans
  currency          String?   @default("IDR")
  status            String // bisa enum seperti PaymentStatus
  rawResponse       Json? // Simpan payload response Midtrans (opsional tapi berguna)
  paidAt            DateTime? // Waktu pembayaran berhasil
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("payments")
}

model Shipment {
  id             String         @id
  orderId        String         @unique
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  deliveryNumber String         @unique
  deliveryDate   DateTime
  items          ShipmentItem[]
  notes          String?
  status         String         @default("PENDING") // PENDING, DELIVERED, CANCELLED
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("shipments")
}

model ShipmentItem {
  id         String   @id
  shipmentId String
  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  unit       String
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("shipment_items")
}

// untuk role user
enum UserRole {
  ADMIN
  CUSTOMER
}

// untuk payment method
enum PaymentMethod {
  BANK_TRANFER
  E_WALLET
  VIRTUAL_ACCOUNT
  QR_CODE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum TransactionStatus {
  capture
  settlement
  pending
  deny
  cancel
  expire
  failure
  refund
}

model Invoice {
  id               String            @id @default(cuid())
  invoiceNumber    String            @unique
  invoiceDate      DateTime
  customerName     String
  customerAddress  String
  customerPhone    String?
  customerEmail    String?
  subtotal         Float
  diskon           Float             @default(0)
  ppn              Float
  total            Float
  notes            String?
  status           String            @default("DRAFT") // DRAFT, PAID, CANCELLED
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  items            InvoiceItem[]
  createdBy        String
  user             User              @relation(fields: [createdBy], references: [id])
  proformaInvoices ProformaInvoice[] @relation("ProformaToInvoice")
  Order            Order?            @relation(fields: [orderId], references: [id])
  orderId          String?

  @@map("invoices")
}

model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  unit      String
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoice_items")
}

model ProformaInvoice {
  id                 String                @id @default(cuid())
  invoiceNumber      String                @unique
  invoiceDate        DateTime
  customerName       String
  customerAddress    String
  customerPhone      String?
  customerEmail      String?
  subtotal           Float
  diskon             Float                 @default(0)
  ppn                Float
  total              Float
  notes              String?
  status             String                @default("DRAFT") // DRAFT, SENT, CONVERTED
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  items              ProformaInvoiceItem[]
  createdBy          String
  user               User                  @relation(fields: [createdBy], references: [id])
  convertedToInvoice Boolean               @default(false)
  convertedInvoiceId String?
  convertedInvoice   Invoice?              @relation("ProformaToInvoice", fields: [convertedInvoiceId], references: [id])
  downloadedAt       DateTime?
  Order              Order?                @relation(fields: [orderId], references: [id])
  orderId            String?

  @@map("proforma_invoices")
}

model ProformaInvoiceItem {
  id                String          @id @default(cuid())
  proformaInvoiceId String
  proformaInvoice   ProformaInvoice @relation(fields: [proformaInvoiceId], references: [id], onDelete: Cascade)
  productId         String
  product           Product         @relation(fields: [productId], references: [id])
  quantity          Int
  price             Float
  unit              String
  total             Float
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("proforma_invoice_items")
}

model Wishlist {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("wishlists")
}
