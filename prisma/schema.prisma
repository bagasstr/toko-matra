generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

// =========================
// User Management
// =========================

model User {
  id            String         @id @map("id_user") @db.VarChar(36)
  email         String         @unique @db.VarChar(255)
  emailVerified DateTime?      @map("email_verified")
  password      String         @db.VarChar(255) // hashed password
  role          UserRole       @default(CUSTOMER) // customer | admin
  typeUser      String         @db.VarChar(50) // individu | perusahaan | toko
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile?
  sessions      Session[]
  address       Address[]
  product       Product[]
  cart          Cart[]
  order         Order[]
  account       Account[]
  notification  Notification[]
  // proformaInvoices ProformaInvoice[]
  // faktur           Faktur[]
  wishlist      Wishlist[]

  @@map("users")
}

model Profile {
  id          String   @id @map("id_profile") @db.VarChar(36)
  userId      String   @unique @db.VarChar(36)
  fullName    String?  @db.VarChar(100)
  imageUrl    String?  @db.Text
  phoneNumber String?  @unique @db.VarChar(20)
  email       String?  @db.VarChar(255)
  userName    String?  @db.VarChar(50)
  gender      String?  @db.VarChar(10)
  dateOfBirth String?  @db.VarChar(20)
  bio         String?  @db.Text
  companyName String?  @db.VarChar(100)
  taxId       String?  @db.VarChar(50)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Account {
  id                String  @id @map("id_account") @db.VarChar(36)
  userId            String  @map("user_id") @db.VarChar(36)
  type              String  @db.VarChar(50)
  provider          String  @db.VarChar(50)
  providerAccountId String  @map("provider_account_id") @db.VarChar(255)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(50)
  scope             String? @db.VarChar(255)
  id_token          String? @db.Text
  session_state     String? @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @map("id_session") @db.VarChar(36)
  sessionToken String   @unique @map("session_token") @db.VarChar(255)
  userId       String   @map("user_id") @db.VarChar(36)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @map("id_verificationToken") @db.VarChar(36)
  identifier String   @db.VarChar(255)
  token      String   @db.VarChar(255)
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Address {
  id            String   @id @map("id_address") @db.VarChar(36)
  userId        String   @db.VarChar(36)
  recipientName String?  @db.VarChar(100)
  labelAddress  String?  @db.VarChar(50)
  address       String?  @db.Text
  city          String?  @db.VarChar(50)
  province      String?  @db.VarChar(50)
  district      String?  @db.VarChar(50)
  village       String?  @db.VarChar(50)
  postalCode    String?  @db.VarChar(10)
  isPrimary     Boolean  @default(false)
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order         Order[]

  @@map("address")
}

// =========================
// Produk & Kategori
// =========================

/// Brand produk
model Brand {
  id        String    @id @map("id_brand") @db.VarChar(36)
  name      String    @db.VarChar(100)
  logo      String?   @db.Text
  slug      String    @unique @db.VarChar(100)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("brands")
}

model Category {
  id          String     @id @map("id_category") @db.VarChar(36)
  name        String     @db.VarChar(100)
  slug        String     @unique @db.VarChar(100)
  description String?    @db.Text
  icon        String?    @db.Text
  imageUrl    String?    @db.Text
  isActive    Boolean    @default(true)
  parentId    String?    @db.VarChar(36)
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

model Product {
  id           String         @id @map("id_product") @db.VarChar(36)
  sku          String         @unique @db.VarChar(50)
  name         String         @db.VarChar(255)
  slug         String         @unique @db.VarChar(255)
  description  String?        @db.Text
  label        String?        @db.VarChar(50) // ready stock | suplier
  images       String[]       @db.Text // Array URL gambar
  price        Int
  unit         String         @db.VarChar(20) // Satuan: kg, m, m2, dll
  stock        Int            @default(0)
  minOrder     Int            @default(0)
  multiOrder   Int            @default(0)
  weight       Float?
  dimensions   String?        @db.VarChar(50)
  isFeatured   Boolean        @default(false)
  isActive     Boolean        @default(true)
  category     Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String         @db.VarChar(36)
  cartItems    CartItem[]
  orderItem    OrderItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  brand        Brand?         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId      String?        @db.VarChar(36)
  User         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?        @db.VarChar(36)
  // fakturItem          FakturItem[]
  // proformaInvoiceItem ProformaInvoiceItem[]
  shipmentItem ShipmentItem[]
  wishlist     Wishlist[]

  @@index([slug])
  @@index([categoryId])
  @@map("products")
}

model Notification {
  id        String   @id @map("id_notification") @db.VarChar(36)
  userId    String   @db.VarChar(36)
  title     String   @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Cart {
  id        String     @id @map("id_cart") @db.VarChar(36)
  userId    String     @db.VarChar(36)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id @map("id_cartItem") @db.VarChar(36)
  cartId    String   @db.VarChar(36)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String   @db.VarChar(36)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id             String      @id @map("id_order") @db.VarChar(36)
  userId         String      @db.VarChar(36)
  status         OrderStatus @default(PENDING)
  totalAmount    Int
  subtotalAmount Int?
  addressId      String      @db.VarChar(36)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  address        Address     @relation(fields: [addressId], references: [id], onDelete: Cascade)
  items          OrderItem[]
  notes          String?     @db.VarChar(255)
  payment        Payment[]
  shipment       Shipment[]
  // faktur         Faktur[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @map("id_orderItem") @db.VarChar(36)
  orderId   String   @db.VarChar(36)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String   @db.VarChar(36)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Payment {
  id                String    @id @map("id_payment") @db.VarChar(36)
  orderId           String    @db.VarChar(36)
  order             Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount            Int
  paymentMethod     String    @db.VarChar(50) // bisa juga enum
  paymentType       String?   @db.VarChar(50) // dari Midtrans: credit_card, bank_transfer, gopay, dll
  transactionId     String?   @db.VarChar(100) // Midtrans transaction_id
  transactionTime   DateTime? // Midtrans transaction_time
  transactionStatus String?   @db.VarChar(50) // settlement, pending, cancel, etc.
  fraudStatus       String?   @db.VarChar(50) // Midtrans fraud_status
  bank              String?   @db.VarChar(50) // untuk VA: bca, bni, dll
  vaNumber          String?   @db.VarChar(50) // nomor virtual account
  approvalCode      String?   @db.VarChar(50) // optional, dari midtrans
  currency          String?   @default("IDR") @db.VarChar(10)
  status            String    @db.VarChar(50) // bisa enum seperti PaymentStatus
  rawResponse       Json? // Simpan payload response Midtrans (opsional tapi berguna)
  paidAt            DateTime? // Waktu pembayaran berhasil
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("payments")
}

model Shipment {
  id             String         @id @map("id_shipment") @db.VarChar(36)
  orderId        String         @unique @db.VarChar(36)
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  deliveryNumber String         @unique @db.VarChar(50)
  deliveryDate   DateTime
  items          ShipmentItem[]
  notes          String?        @db.Text
  status         String         @default("PENDING") @db.VarChar(50) // PENDING, DELIVERED, CANCELLED
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("shipments")
}

model ShipmentItem {
  id         String   @id @map("id_shipmentItem") @db.VarChar(36)
  shipmentId String   @db.VarChar(36)
  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  productId  String   @db.VarChar(36)
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  unit       String   @db.VarChar(20)
  notes      String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("shipment_items")
}

// untuk role user
enum UserRole {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
}

// untuk payment method
enum PaymentMethod {
  BANK_TRANFER
  E_WALLET
  VIRTUAL_ACCOUNT
  QR_CODE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum TransactionStatus {
  capture
  settlement
  pending
  deny
  cancel
  expire
  failure
  refund
}

// model Faktur {
//   id               String            @id
//   fakturNumber     String            @unique
//   fakturDate       DateTime
//   customerName     String
//   customerAddress  String
//   customerPhone    String?
//   customerEmail    String?
//   subtotal         Float
//   diskon           Float             @default(0)
//   ppn              Float
//   total            Float
//   notes            String?
//   status           String
//   createdAt        DateTime          @default(now())
//   updatedAt        DateTime          @updatedAt
//   items            FakturItem[]
//   createdBy        String
//   user             User              @relation(fields: [createdBy], references: [id])
//   proformaInvoices ProformaInvoice[] @relation("ProformaToFaktur")
//   order            Order?            @relation(fields: [orderId], references: [id])
//   orderId          String?

//   @@map("faktur")
// }

// model FakturItem {
//   id        String   @id
//   fakturId  String
//   faktur    Faktur   @relation(fields: [fakturId], references: [id], onDelete: Cascade)
//   productId String
//   product   Product  @relation(fields: [productId], references: [id])
//   quantity  Int
//   price     Float
//   unit      String
//   total     Float
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("faktur_items")
// }

// model ProformaInvoice {
//   id                 String                @id @default(cuid())
//   invoiceNumber      String                @unique
//   invoiceDate        DateTime
//   customerName       String
//   customerAddress    String
//   customerPhone      String?
//   customerEmail      String?
//   subtotal           Float
//   diskon             Float                 @default(0)
//   ppn                Float
//   total              Float
//   notes              String?
//   status             String                @default("DRAFT") // DRAFT, SENT, CONVERTED
//   createdAt          DateTime              @default(now())
//   updatedAt          DateTime              @updatedAt
//   items              ProformaInvoiceItem[]
//   createdBy          String
//   user               User                  @relation(fields: [createdBy], references: [id])
//   convertedToInvoice Boolean               @default(false)
//   convertedInvoiceId String?
//   convertedInvoice   Faktur?               @relation("ProformaToFaktur", fields: [convertedInvoiceId], references: [id])
//   downloadedAt       DateTime?

//   @@map("proforma_invoices")
// }

// model ProformaInvoiceItem {
//   id                String          @id @default(cuid())
//   proformaInvoiceId String
//   proformaInvoice   ProformaInvoice @relation(fields: [proformaInvoiceId], references: [id], onDelete: Cascade)
//   productId         String
//   product           Product         @relation(fields: [productId], references: [id])
//   quantity          Int
//   price             Float
//   unit              String
//   total             Float
//   createdAt         DateTime        @default(now())
//   updatedAt         DateTime        @updatedAt

//   @@map("proforma_invoice_items")
// }

model Wishlist {
  id        String  @id @map("id_wishlist") @db.VarChar(36)
  userId    String  @db.VarChar(36)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String  @unique @db.VarChar(36)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("wishlists")
}
